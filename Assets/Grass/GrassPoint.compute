// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FindGrassPoints

#include "Simplex.compute"
#include "UnityCG.cginc"
#include "Scale.compute"

// Struct for GrassData with position and UV's
struct GrassData {
    float4 position;
    float2 uv;
    float displacement;
    bool placePosition;
};

// Initialize variables
RWStructuredBuffer<GrassData> _GrassBuffer;
RWStructuredBuffer<uint> _ChunkCounter;

Texture2D<float4> _HeightMap;
Texture2D<float4> _PlacementMap;

SamplerState sampler_HeightMap;
SamplerState sampler_PlacementMap;

float3 _TerrainPosition;
float2 _TerrainResolution;
float _MaxTerrainHeight, _Scale, _MeshHeight;

int _HeightMapRes, _TerrainDim, _XOffset, _YOffset, _NumChunks, _ChunkDimension;

// 8x8x1 threads which makes for optimal 64 threads
[numthreads(8, 8, 1)]
void FindGrassPoints (uint3 id : SV_DispatchThreadID)
{
    // Check if id.x and id.y is within the placement map resolution range
    if (id.x < uint(_ChunkDimension) && id.y < uint(_ChunkDimension)) {
        // Load pixel data from placement map
        float2 pixelUV = 0.0f;

        // Convert pixel coordinates to normalized value (0-1) and use that to sample placement map and get position for grass
        pixelUV.x = id.x + _ChunkDimension * _XOffset;
        pixelUV.y = id.y + _ChunkDimension * _YOffset;

        pixelUV = normalize2D(pixelUV, _TerrainResolution);

        float4 pixel = _PlacementMap.SampleLevel(sampler_PlacementMap, pixelUV, 0);
        float4 black = float4(0.0, 0.0, 0.0, 1.0);

        // Initialize a grass data variable
        GrassData grass;

        // Check if the pixel is black
        if (pixel.r == black.r && pixel.g == black.g && pixel.b == black.b && pixel.a == black.a) {
            // increment the chunk counter to keep track of valid chunks
            _ChunkCounter[0] += 1;

            // Set the grass position and cast the chunk dimension to float
            float4 pos = 0.0f;
            float chunkDimension = float(_ChunkDimension);

            // Set XZ position of grass
            pos.x = (id.x - (chunkDimension * 0.5f * _NumChunks)) + chunkDimension * _XOffset;
            pos.z = (id.y - (chunkDimension * 0.5f * _NumChunks)) + chunkDimension * _YOffset;
            pos.xz *= (1.0f / _Scale);

            // Apply noise to the horizontal position coordinates of the grass
            pos.x += snoise(float3(pos.xz + _XOffset + _YOffset, 0.0f) * 3.0f) * 0.3f;
            pos.z += snoise(float3(pos.xz + _XOffset + _YOffset, 0.0f) * 4.0f) * 0.3f;

            // Find Y displacement of grass by sampling height map
            float4 displacement = _HeightMap.SampleLevel(sampler_HeightMap, pixelUV, 0);
            pos.y = displacement.r * _MaxTerrainHeight * 2;

            // Get a noise value based of the x and z coordinates
            float noise = abs(snoise(float3(pos.xz + _XOffset + _YOffset, 0.0f) * 2.2f));

            // Set tallness of grass
            pos.w = lerp(0.3f, 0.8f, noise);

            // Apply calculated data to grass object
            grass.position = pos;
            grass.displacement = displacement.r * _MaxTerrainHeight * 2;
            grass.uv = pixelUV;
            grass.placePosition = true;

            // Update grass in the buffer
            _GrassBuffer[id.x + id.y * _ChunkDimension] = grass;
        } else {
            grass.placePosition = false;
        }
    }
}
