// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FindGrassPoints

#include "Simplex.compute"
#include "Scale.compute"

// Struct for GrassData with position and UV's
struct GrassData {
    float4 position;
    float2 uv;
    uint placePosition;
};

// Initialize variables
RWStructuredBuffer<GrassData> _GrassBuffer;
RWTexture2D<float4> _PlacementMap;
Texture2D<float4> _HeightMap;

float3 _TerrainPosition;
float2 _Resolution;
float _MaxTerrainHeight, _Scale;

int _HeightMapRes, _TerrainDim, _XOffset, _YOffset, _NumChunks, _ChunkDimension;

// 8x8x1 threads which makes for optimal 64 threads
[numthreads(8, 8, 1)]
void FindGrassPoints (uint3 id : SV_DispatchThreadID)
{
    // Check if id.x and id.y is within the placement map resolution range
    if (id.x < uint(_ChunkDimension) && id.y < uint(_ChunkDimension)) {
        // Load pixel data from placement map
        float4 pixel = _PlacementMap.Load(id.xy);
        float4 black = float4(0.0, 0.0, 0.0, 1.0);

        // Check if the pixel is black
        if (pixel.r == black.r && pixel.g == black.g && pixel.b == black.b && pixel.a == black.a) {
            // Get the index for the grass buffer
            uint index = (id.y * _Resolution.x) + id.x;

            // Set the grass position
            float4 pos = 0.0f;
            float _scale = float(_Scale);
            float dimension = float(_TerrainDim);
            float chunkDimension = float(_ChunkDimension);
            float scaledDimension = dimension * _scale;

            pos.x = (id.x - (chunkDimension * 0.5f * _NumChunks)) + chunkDimension * _XOffset;
            pos.z = (id.y - (chunkDimension * 0.5f * _NumChunks)) + chunkDimension * _YOffset;
            pos.xz *= (1.0f / _scale);

            // Save original grass position
            float4 tempPosX = pos.x;
            float4 tempPosZ = pos.z;

            // Apply noise to the horizontal position coordinates of the grass
            // FYI: Tweak these values for more randomness
            pos.x += snoise(float3(pos.xz, 0.0f) * 3.0f) * 0.5f;
            pos.z += snoise(float3(pos.xz, 0.0f) * 4.0f) * 0.5f;

            // Check if displaced grass is within the terrain bounds
            if (pos.x < _TerrainPosition.x || pos.x > _Resolution.x + _TerrainPosition.x) {
                pos.x = tempPosX;
            }

            if (pos.z < _TerrainPosition.z || pos.z > _Resolution.y + _TerrainPosition.z) {
                pos.z = tempPosZ;
            }

            float uvX = pos.x + dimension * 0.5f * _NumChunks * (1.0f / _NumChunks);
            float uvY = pos.z + dimension * 0.5f * _NumChunks * (1.0f / _NumChunks);

            float2 uv = float2(uvX, uvY) / dimension;
            uv.y = 1 - uv.y;
            uv.x = 1 - uv.x;

            // Scale x and y index of the placement map to match the new range of the heightmap
            float x = scale(pos.x, 0, _TerrainDim, 0, _HeightMapRes);
            float y = scale(pos.z, 0, _TerrainDim, 0, _HeightMapRes);
            uint2 scaledIndex = uint2(uint(x), uint(y));

            // Set the y position of the grass based on the heightmap data
            pos.y = _HeightMap[scaledIndex.xy].r * 2. * _MaxTerrainHeight;

            // Get a noise value based of the x and z coordinates
            float noise = abs(snoise(float3(pos.xz, 0.0f) * 0.2f));

            // Interpolate the height displacement
            pos.w = lerp(0.3f, 0.6f, noise);

            // Retrieve grass from the grass buffer
            GrassData grass = _GrassBuffer[index];

            // Apply calculated data to grass object
            grass.position = pos;
            grass.uv = uv;
            grass.placePosition = 1;

            // Update grass in the buffer
            _GrassBuffer[index] = grass;
        }
    }
}
